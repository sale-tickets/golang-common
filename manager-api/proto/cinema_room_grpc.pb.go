// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: manager-api/api/cinema_room.proto

package manager_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CinemaRoomService_Create_FullMethodName = "/cinema_room.CinemaRoomService/Create"
	CinemaRoomService_Update_FullMethodName = "/cinema_room.CinemaRoomService/Update"
	CinemaRoomService_Detail_FullMethodName = "/cinema_room.CinemaRoomService/Detail"
	CinemaRoomService_List_FullMethodName   = "/cinema_room.CinemaRoomService/List"
)

// CinemaRoomServiceClient is the client API for CinemaRoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CinemaRoomServiceClient interface {
	Create(ctx context.Context, in *CreateCinemaRoomReq, opts ...grpc.CallOption) (*CreateCinemaRoomRes, error)
	Update(ctx context.Context, in *UpdateCinemaRoomReq, opts ...grpc.CallOption) (*UpdateCinemaRoomRes, error)
	Detail(ctx context.Context, in *DetailCinemaRoomReq, opts ...grpc.CallOption) (*DetailCinemaRoomRes, error)
	List(ctx context.Context, in *ListCinemaRoomReq, opts ...grpc.CallOption) (*ListCinemaRoomRes, error)
}

type cinemaRoomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCinemaRoomServiceClient(cc grpc.ClientConnInterface) CinemaRoomServiceClient {
	return &cinemaRoomServiceClient{cc}
}

func (c *cinemaRoomServiceClient) Create(ctx context.Context, in *CreateCinemaRoomReq, opts ...grpc.CallOption) (*CreateCinemaRoomRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCinemaRoomRes)
	err := c.cc.Invoke(ctx, CinemaRoomService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaRoomServiceClient) Update(ctx context.Context, in *UpdateCinemaRoomReq, opts ...grpc.CallOption) (*UpdateCinemaRoomRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCinemaRoomRes)
	err := c.cc.Invoke(ctx, CinemaRoomService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaRoomServiceClient) Detail(ctx context.Context, in *DetailCinemaRoomReq, opts ...grpc.CallOption) (*DetailCinemaRoomRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetailCinemaRoomRes)
	err := c.cc.Invoke(ctx, CinemaRoomService_Detail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaRoomServiceClient) List(ctx context.Context, in *ListCinemaRoomReq, opts ...grpc.CallOption) (*ListCinemaRoomRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCinemaRoomRes)
	err := c.cc.Invoke(ctx, CinemaRoomService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CinemaRoomServiceServer is the server API for CinemaRoomService service.
// All implementations must embed UnimplementedCinemaRoomServiceServer
// for forward compatibility.
type CinemaRoomServiceServer interface {
	Create(context.Context, *CreateCinemaRoomReq) (*CreateCinemaRoomRes, error)
	Update(context.Context, *UpdateCinemaRoomReq) (*UpdateCinemaRoomRes, error)
	Detail(context.Context, *DetailCinemaRoomReq) (*DetailCinemaRoomRes, error)
	List(context.Context, *ListCinemaRoomReq) (*ListCinemaRoomRes, error)
	mustEmbedUnimplementedCinemaRoomServiceServer()
}

// UnimplementedCinemaRoomServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCinemaRoomServiceServer struct{}

func (UnimplementedCinemaRoomServiceServer) Create(context.Context, *CreateCinemaRoomReq) (*CreateCinemaRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCinemaRoomServiceServer) Update(context.Context, *UpdateCinemaRoomReq) (*UpdateCinemaRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCinemaRoomServiceServer) Detail(context.Context, *DetailCinemaRoomReq) (*DetailCinemaRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}
func (UnimplementedCinemaRoomServiceServer) List(context.Context, *ListCinemaRoomReq) (*ListCinemaRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCinemaRoomServiceServer) mustEmbedUnimplementedCinemaRoomServiceServer() {}
func (UnimplementedCinemaRoomServiceServer) testEmbeddedByValue()                           {}

// UnsafeCinemaRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CinemaRoomServiceServer will
// result in compilation errors.
type UnsafeCinemaRoomServiceServer interface {
	mustEmbedUnimplementedCinemaRoomServiceServer()
}

func RegisterCinemaRoomServiceServer(s grpc.ServiceRegistrar, srv CinemaRoomServiceServer) {
	// If the following call pancis, it indicates UnimplementedCinemaRoomServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CinemaRoomService_ServiceDesc, srv)
}

func _CinemaRoomService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCinemaRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaRoomServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CinemaRoomService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaRoomServiceServer).Create(ctx, req.(*CreateCinemaRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaRoomService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCinemaRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaRoomServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CinemaRoomService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaRoomServiceServer).Update(ctx, req.(*UpdateCinemaRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaRoomService_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailCinemaRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaRoomServiceServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CinemaRoomService_Detail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaRoomServiceServer).Detail(ctx, req.(*DetailCinemaRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaRoomService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCinemaRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaRoomServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CinemaRoomService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaRoomServiceServer).List(ctx, req.(*ListCinemaRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CinemaRoomService_ServiceDesc is the grpc.ServiceDesc for CinemaRoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CinemaRoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cinema_room.CinemaRoomService",
	HandlerType: (*CinemaRoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CinemaRoomService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CinemaRoomService_Update_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _CinemaRoomService_Detail_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CinemaRoomService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager-api/api/cinema_room.proto",
}
