// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: manager-api/api/theater_seating.proto

package manager_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TheaterSeating_CreateTheaterSeating_FullMethodName = "/theater_seating.TheaterSeating/CreateTheaterSeating"
	TheaterSeating_ListTheaterSeating_FullMethodName   = "/theater_seating.TheaterSeating/ListTheaterSeating"
)

// TheaterSeatingClient is the client API for TheaterSeating service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TheaterSeatingClient interface {
	CreateTheaterSeating(ctx context.Context, in *CreateTheaterSeatingReq, opts ...grpc.CallOption) (*CreateTheaterSeatingRes, error)
	ListTheaterSeating(ctx context.Context, in *ListTheaterSeatingReq, opts ...grpc.CallOption) (*ListTheaterSeatingRes, error)
}

type theaterSeatingClient struct {
	cc grpc.ClientConnInterface
}

func NewTheaterSeatingClient(cc grpc.ClientConnInterface) TheaterSeatingClient {
	return &theaterSeatingClient{cc}
}

func (c *theaterSeatingClient) CreateTheaterSeating(ctx context.Context, in *CreateTheaterSeatingReq, opts ...grpc.CallOption) (*CreateTheaterSeatingRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTheaterSeatingRes)
	err := c.cc.Invoke(ctx, TheaterSeating_CreateTheaterSeating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theaterSeatingClient) ListTheaterSeating(ctx context.Context, in *ListTheaterSeatingReq, opts ...grpc.CallOption) (*ListTheaterSeatingRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTheaterSeatingRes)
	err := c.cc.Invoke(ctx, TheaterSeating_ListTheaterSeating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TheaterSeatingServer is the server API for TheaterSeating service.
// All implementations must embed UnimplementedTheaterSeatingServer
// for forward compatibility.
type TheaterSeatingServer interface {
	CreateTheaterSeating(context.Context, *CreateTheaterSeatingReq) (*CreateTheaterSeatingRes, error)
	ListTheaterSeating(context.Context, *ListTheaterSeatingReq) (*ListTheaterSeatingRes, error)
	mustEmbedUnimplementedTheaterSeatingServer()
}

// UnimplementedTheaterSeatingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTheaterSeatingServer struct{}

func (UnimplementedTheaterSeatingServer) CreateTheaterSeating(context.Context, *CreateTheaterSeatingReq) (*CreateTheaterSeatingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTheaterSeating not implemented")
}
func (UnimplementedTheaterSeatingServer) ListTheaterSeating(context.Context, *ListTheaterSeatingReq) (*ListTheaterSeatingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTheaterSeating not implemented")
}
func (UnimplementedTheaterSeatingServer) mustEmbedUnimplementedTheaterSeatingServer() {}
func (UnimplementedTheaterSeatingServer) testEmbeddedByValue()                        {}

// UnsafeTheaterSeatingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TheaterSeatingServer will
// result in compilation errors.
type UnsafeTheaterSeatingServer interface {
	mustEmbedUnimplementedTheaterSeatingServer()
}

func RegisterTheaterSeatingServer(s grpc.ServiceRegistrar, srv TheaterSeatingServer) {
	// If the following call pancis, it indicates UnimplementedTheaterSeatingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TheaterSeating_ServiceDesc, srv)
}

func _TheaterSeating_CreateTheaterSeating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTheaterSeatingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheaterSeatingServer).CreateTheaterSeating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheaterSeating_CreateTheaterSeating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheaterSeatingServer).CreateTheaterSeating(ctx, req.(*CreateTheaterSeatingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheaterSeating_ListTheaterSeating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTheaterSeatingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheaterSeatingServer).ListTheaterSeating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheaterSeating_ListTheaterSeating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheaterSeatingServer).ListTheaterSeating(ctx, req.(*ListTheaterSeatingReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TheaterSeating_ServiceDesc is the grpc.ServiceDesc for TheaterSeating service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TheaterSeating_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "theater_seating.TheaterSeating",
	HandlerType: (*TheaterSeatingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTheaterSeating",
			Handler:    _TheaterSeating_CreateTheaterSeating_Handler,
		},
		{
			MethodName: "ListTheaterSeating",
			Handler:    _TheaterSeating_ListTheaterSeating_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager-api/api/theater_seating.proto",
}
