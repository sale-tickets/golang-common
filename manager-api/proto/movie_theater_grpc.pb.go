// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: manager-api/api/movie_theater.proto

package manager_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MovieTheater_Create_FullMethodName  = "/movie_theater.MovieTheater/Create"
	MovieTheater_Update_FullMethodName  = "/movie_theater.MovieTheater/Update"
	MovieTheater_GetList_FullMethodName = "/movie_theater.MovieTheater/GetList"
	MovieTheater_Detail_FullMethodName  = "/movie_theater.MovieTheater/Detail"
)

// MovieTheaterClient is the client API for MovieTheater service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieTheaterClient interface {
	Create(ctx context.Context, in *CreateMovieTheaterReq, opts ...grpc.CallOption) (*CreateMovieTheaterRes, error)
	Update(ctx context.Context, in *UpdateMovieTheaterReq, opts ...grpc.CallOption) (*UpdateMovieTheaterRes, error)
	GetList(ctx context.Context, in *GetListMovieTheaterReq, opts ...grpc.CallOption) (*GetListMovieTheaterRes, error)
	Detail(ctx context.Context, in *DetailMovieTheaterReq, opts ...grpc.CallOption) (*DetailMovieTheaterRes, error)
}

type movieTheaterClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieTheaterClient(cc grpc.ClientConnInterface) MovieTheaterClient {
	return &movieTheaterClient{cc}
}

func (c *movieTheaterClient) Create(ctx context.Context, in *CreateMovieTheaterReq, opts ...grpc.CallOption) (*CreateMovieTheaterRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMovieTheaterRes)
	err := c.cc.Invoke(ctx, MovieTheater_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieTheaterClient) Update(ctx context.Context, in *UpdateMovieTheaterReq, opts ...grpc.CallOption) (*UpdateMovieTheaterRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMovieTheaterRes)
	err := c.cc.Invoke(ctx, MovieTheater_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieTheaterClient) GetList(ctx context.Context, in *GetListMovieTheaterReq, opts ...grpc.CallOption) (*GetListMovieTheaterRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListMovieTheaterRes)
	err := c.cc.Invoke(ctx, MovieTheater_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieTheaterClient) Detail(ctx context.Context, in *DetailMovieTheaterReq, opts ...grpc.CallOption) (*DetailMovieTheaterRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetailMovieTheaterRes)
	err := c.cc.Invoke(ctx, MovieTheater_Detail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieTheaterServer is the server API for MovieTheater service.
// All implementations must embed UnimplementedMovieTheaterServer
// for forward compatibility.
type MovieTheaterServer interface {
	Create(context.Context, *CreateMovieTheaterReq) (*CreateMovieTheaterRes, error)
	Update(context.Context, *UpdateMovieTheaterReq) (*UpdateMovieTheaterRes, error)
	GetList(context.Context, *GetListMovieTheaterReq) (*GetListMovieTheaterRes, error)
	Detail(context.Context, *DetailMovieTheaterReq) (*DetailMovieTheaterRes, error)
	mustEmbedUnimplementedMovieTheaterServer()
}

// UnimplementedMovieTheaterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMovieTheaterServer struct{}

func (UnimplementedMovieTheaterServer) Create(context.Context, *CreateMovieTheaterReq) (*CreateMovieTheaterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMovieTheaterServer) Update(context.Context, *UpdateMovieTheaterReq) (*UpdateMovieTheaterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMovieTheaterServer) GetList(context.Context, *GetListMovieTheaterReq) (*GetListMovieTheaterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedMovieTheaterServer) Detail(context.Context, *DetailMovieTheaterReq) (*DetailMovieTheaterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}
func (UnimplementedMovieTheaterServer) mustEmbedUnimplementedMovieTheaterServer() {}
func (UnimplementedMovieTheaterServer) testEmbeddedByValue()                      {}

// UnsafeMovieTheaterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieTheaterServer will
// result in compilation errors.
type UnsafeMovieTheaterServer interface {
	mustEmbedUnimplementedMovieTheaterServer()
}

func RegisterMovieTheaterServer(s grpc.ServiceRegistrar, srv MovieTheaterServer) {
	// If the following call pancis, it indicates UnimplementedMovieTheaterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MovieTheater_ServiceDesc, srv)
}

func _MovieTheater_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovieTheaterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieTheaterServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieTheater_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieTheaterServer).Create(ctx, req.(*CreateMovieTheaterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieTheater_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieTheaterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieTheaterServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieTheater_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieTheaterServer).Update(ctx, req.(*UpdateMovieTheaterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieTheater_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListMovieTheaterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieTheaterServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieTheater_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieTheaterServer).GetList(ctx, req.(*GetListMovieTheaterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieTheater_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailMovieTheaterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieTheaterServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieTheater_Detail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieTheaterServer).Detail(ctx, req.(*DetailMovieTheaterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieTheater_ServiceDesc is the grpc.ServiceDesc for MovieTheater service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieTheater_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movie_theater.MovieTheater",
	HandlerType: (*MovieTheaterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MovieTheater_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MovieTheater_Update_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _MovieTheater_GetList_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _MovieTheater_Detail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager-api/api/movie_theater.proto",
}
